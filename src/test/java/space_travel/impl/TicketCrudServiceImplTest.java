package space_travel.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import space_travel.entity.Client;
import space_travel.entity.Planet;
import space_travel.entity.Ticket;
import space_travel.service.ClientCrudService;
import space_travel.service.PlanetCrudService;

import static org.junit.jupiter.api.Assertions.*;

class TicketCrudServiceImplTest {

    private TicketCrudServiceImpl ticketService;
    private ClientCrudService mockClientService;
    private PlanetCrudService mockPlanetService;

    @BeforeEach
    void setUp() {
        mockClientService = Mockito.mock(ClientCrudService.class);
        mockPlanetService = Mockito.mock(PlanetCrudService.class);
        ticketService = new TicketCrudServiceImpl(mockClientService, mockPlanetService);
    }

    @Test
    void save_shouldThrow_whenClientIsNull() {
        Ticket ticket = new Ticket();
        ticket.setClient(null);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenClientIsNull - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("client"));
    }

    @Test
    void save_shouldThrow_whenClientNotFoundInDb() {
        Ticket ticket = new Ticket();

        Client client = new Client();
        client.setId(1L);
        client.setName("Test Passenger");
        client.setPassport("TP001");
        ticket.setClient(client);

        Planet planet = new Planet();
        planet.setId("PL1");
        planet.setName("Test Planet");
        ticket.setFromPlanet(planet);
        ticket.setToPlanet(planet); // Ensure we reach client check

        Mockito.when(mockClientService.findById(client.getId())).thenReturn(null);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenClientNotFoundInDb - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("client"));
    }

    @Test
    void save_shouldThrow_whenSourcePlanetIsNull() {
        Ticket ticket = new Ticket();

        Client client = new Client();
        client.setId(1L);
        client.setName("Test Passenger");
        client.setPassport("TP001");
        ticket.setClient(client);
        ticket.setFromPlanet(null);
        ticket.setToPlanet(new Planet()); // dummy planet for destination

        Mockito.when(mockClientService.findById(client.getId())).thenReturn(client);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenSourcePlanetIsNull - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("source"));
    }

    @Test
    void save_shouldThrow_whenSourcePlanetNotFoundInDb() {
        Ticket ticket = new Ticket();

        Client client = new Client();
        client.setId(1L);
        ticket.setClient(client);

        Planet from = new Planet();
        from.setId("PL1");
        ticket.setFromPlanet(from);
        ticket.setToPlanet(from); // dummy destination to ensure we get to source check

        Mockito.when(mockClientService.findById(client.getId())).thenReturn(client);
        Mockito.when(mockPlanetService.findById(from.getId())).thenReturn(null);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenSourcePlanetNotFoundInDb - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("source"));
    }

    @Test
    void save_shouldThrow_whenDestinationPlanetIsNull() {
        Ticket ticket = new Ticket();

        Client client = new Client();
        client.setId(1L);
        ticket.setClient(client);

        Planet from = new Planet();
        from.setId("PL1");
        ticket.setFromPlanet(from);
        ticket.setToPlanet(null);

        Mockito.when(mockClientService.findById(client.getId())).thenReturn(client);
        Mockito.when(mockPlanetService.findById(from.getId())).thenReturn(from);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenDestinationPlanetIsNull - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("destination"));
    }

    @Test
    void save_shouldThrow_whenDestinationPlanetNotFoundInDb() {
        Ticket ticket = new Ticket();

        Client client = new Client();
        client.setId(1L);
        ticket.setClient(client);

        Planet from = new Planet();
        from.setId("PL1");
        Planet to = new Planet();
        to.setId("PL2");
        ticket.setFromPlanet(from);
        ticket.setToPlanet(to);

        Mockito.when(mockClientService.findById(client.getId())).thenReturn(client);
        Mockito.when(mockPlanetService.findById(from.getId())).thenReturn(from);
        Mockito.when(mockPlanetService.findById(to.getId())).thenReturn(null);

        IllegalArgumentException ex = assertThrows(IllegalArgumentException.class, () -> ticketService.save(ticket));
        System.out.println("‚úÖ save_shouldThrow_whenDestinationPlanetNotFoundInDb - " + ex.getMessage());
        assertTrue(ex.getMessage().toLowerCase().contains("destination"));
    }
}


/*
 üß™ –ù–æ—Ç–∞—Ç–∫–∞ –ø—Ä–æ Mockito (–¥–ª—è —Å–µ–±–µ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î)

 –¶–µ–π –∫–ª–∞—Å —Ç–µ—Å—Ç—É—î –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ (TicketCrudServiceImpl.save()).

 ‚úÖ –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Mockito, —Ç–æ–º—É —â–æ:
 - –£ save() —î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: ClientCrudService, PlanetCrudService, HibernateHelper
 - –ú–∏ –Ω–µ —Ö–æ—á–µ–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ —á–∏ –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 - Mockito –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ "—Ñ–µ–π–∫–æ–≤—ñ" —Å–µ—Ä–≤—ñ—Å–∏ –π –∑–∞–¥–∞—Ç–∏ —ó—Ö –ø–æ–≤–µ–¥—ñ–Ω–∫—É
 - –¶–µ —Ä–æ–±–∏—Ç—å —Ç–µ—Å—Ç–∏ –ª–µ–≥–∫–∏–º–∏, —à–≤–∏–¥–∫–∏–º–∏ –π –Ω–µ–∑–∞–ª–µ–∂–Ω–∏–º–∏ –≤—ñ–¥ –ë–î

 ‚ùó –ë–µ–∑ Mockito –¥–æ–≤–µ–ª–æ—Å—å –±–∏:
 - –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤ (ClientCrudServiceImpl —Ç–æ—â–æ)
 - –ù–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ Hibernate + –ë–î –Ω–∞–≤—ñ—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ null
 - –¶–µ –≤–∂–µ –±—É–≤ –±–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Ç–µ—Å—Ç, –∞ –Ω–µ —é–Ω—ñ—Ç-—Ç–µ—Å—Ç

 üìå –Ø–∫—â–æ —Ç–µ—Å—Ç –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —ñ–Ω—à–∏–º–∏ –∫–ª–∞—Å–∞–º–∏ ‚Äî Mockito –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
 –ê–ª–µ —è–∫—â–æ —î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ ‚Äî Mockito —Ä—è—Ç—É—î.

 üîÅ –©–æ–± –∑–≥–∞–¥–∞—Ç–∏:
 - Mockito.mock(...) —Å—Ç–≤–æ—Ä—é—î –º–æ–∫
 - when(...).thenReturn(...) –∑–∞–¥–∞—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É
 - assertThrows(...) –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–µ—Ç–æ–¥ –∫–∏–¥–∞—î –≤–∏–Ω—è—Ç–æ–∫
*/
