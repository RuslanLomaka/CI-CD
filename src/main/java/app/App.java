package app;

import config.HibernateUtil;
import org.flywaydb.core.Flyway;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import space_travel.entity.Client;
import space_travel.entity.Planet;
import space_travel.entity.Ticket;
import space_travel.impl.ClientCrudServiceImpl;
import space_travel.impl.PlanetCrudServiceImpl;
import space_travel.impl.TicketCrudServiceImpl;
import space_travel.service.ClientCrudService;
import space_travel.service.PlanetCrudService;
import space_travel.service.TicketCrudService;

import java.time.Instant;
import java.util.List;
// trigger CI
// ‚úÖ –ü—ñ–¥—Å—É–º–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
/*
–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ —Å—É—Ç–Ω–æ—Å—Ç—è–º–∏:
–£ —Å—É—Ç–Ω–æ—Å—Ç—ñ Client –¥–æ–¥–∞–Ω–æ –∑–≤‚Äô—è–∑–æ–∫ @OneToMany –∑ –∫–≤–∏—Ç–∫–∞–º–∏ (List<Ticket>).
–£ —Å—É—Ç–Ω–æ—Å—Ç—ñ Ticket –¥–æ–¥–∞–Ω–æ –∑–≤‚Äô—è–∑–∫–∏ @ManyToOne –¥–æ Client, fromPlanet —ñ toPlanet.
–†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –º–µ—Ç–æ–¥—ñ save() –∫–ª–∞—Å—É TicketCrudServiceImpl:
–Ø–∫—â–æ client –¥–æ—Ä—ñ–≤–Ω—é—î null –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î –≤ –ë–î ‚Äî –∫–∏–¥–∞—î—Ç—å—Å—è IllegalArgumentException.
–Ø–∫—â–æ fromPlanet –¥–æ—Ä—ñ–≤–Ω—é—î null –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î –≤ –ë–î ‚Äî –∫–∏–¥–∞—î—Ç—å—Å—è –≤–∏–Ω—è—Ç–æ–∫.
–Ø–∫—â–æ toPlanet –¥–æ—Ä—ñ–≤–Ω—é—î null –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î –≤ –ë–î ‚Äî –∫–∏–¥–∞—î—Ç—å—Å—è –≤–∏–Ω—è—Ç–æ–∫.
–°—Ç–≤–æ—Ä–µ–Ω–æ JUnit-—Ç–µ—Å—Ç TicketCrudServiceImplTest, —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î —à—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π:
client == null
client –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
fromPlanet == null
fromPlanet –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
toPlanet == null
toPlanet –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ Mockito –¥–ª—è –º–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:
–ó–∞–º–æ–∫–∞–Ω–æ —Å–µ—Ä–≤—ñ—Å–∏ ClientCrudService —ñ PlanetCrudService.
–ú–µ—Ç–æ–¥ findById(...) –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞/–ø–ª–∞–Ω–µ—Ç–∏ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î null –∞–±–æ –≤–∞–ª—ñ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –º–µ—Ç–æ–¥—É save().
–¢–µ—Å—Ç–∏ —ñ–∑–æ–ª—å–æ–≤–∞–Ω—ñ –≤—ñ–¥ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –ë–î.
–û—Å–æ–±–ª–∏–≤–∞ —É–≤–∞–≥–∞ –ø—Ä–∏–¥—ñ–ª–µ–Ω–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—é –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å Sonar:
–Ø –¥–æ–∫–ª–∞–≤ –∑–Ω–∞—á–Ω–∏—Ö –∑—É—Å–∏–ª—å –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å Sonar, –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞–≤—à–∏ –ª–æ–≥—ñ–∫—É —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–∏–≤—à–∏ —á–∏—Å—Ç–æ—Ç—É –∫–æ–¥—É.
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤–∫–ª—é—á–∞–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á—ñ—Ç–∫–∏—Ö, —ñ–∑–æ–ª—å–æ–≤–∞–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—É—á–∞—Å–Ω–∏–º
 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º —Ä–æ–∑—Ä–æ–±–∫–∏.
üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç: –¢–µ—Å—Ç–æ–≤–∏–π –∫–ª–∞—Å TicketCrudServiceImplTest –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫–∞ –Ω–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è, —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑
–ø–æ–ª—ñ–≤ (client, fromPlanet, toPlanet) —î null –∞–±–æ –≤–∫–∞–∑—É—î –Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å, —â–æ –Ω–µ —ñ—Å–Ω—É—î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
*/
public class App {
    private static final Logger logger = LoggerFactory.getLogger(App.class);

    // === Log Message Constants ===
    private static final String MSG_PLANET_SAVE_SUCCESS = "‚úÖ –ü–ª–∞–Ω–µ—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.";
    private static final String MSG_PLANET_SAVE_ERROR = "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {}";
    private static final String MSG_PLANET_FOUND = "Found Planet: {}";
    private static final String MSG_ALL_PLANETS = "All Planets: {}";

    private static final String MSG_PASSENGER_EXISTS_WARNING = "‚ÑπÔ∏è Passenger already exists, maybe update?";
    private static final String MSG_PASSENGER_FOUND = "Found Passenger: {}";
    private static final String MSG_ALL_PASSENGERS = "All Passengers: {}";

    private static final String MSG_TICKET_FOUND = "Found Ticket: {}";
    private static final String MSG_ALL_TICKETS = "All Tickets: {}";
    private static final String MSG_EXECUTION_DONE = "Everything executed.";

    public static void main(String[] args) {
        // Migrate DB if needed
        migrate();

        // Initialize services
        ClientCrudService passengerService = new ClientCrudServiceImpl();
        PlanetCrudService planetService = new PlanetCrudServiceImpl();
        TicketCrudService ticketService = new TicketCrudServiceImpl(passengerService, planetService);

        // === PLANET ===
        Planet mars = new Planet();
        mars.setId("MARS");
        mars.setName("Mars");
        try {
            planetService.save(mars);
            if (logger.isInfoEnabled()) {
                logger.info(MSG_PLANET_SAVE_SUCCESS);
            }
        } catch (Exception e) {
            if (logger.isWarnEnabled()) {
                logger.warn(MSG_PLANET_SAVE_ERROR, e.getMessage());
            }
        }

        // Try saving again to see the warning
        try {
            planetService.save(mars);
            logger.info(MSG_PLANET_SAVE_SUCCESS);
        } catch (Exception e) {
            logger.warn(MSG_PLANET_SAVE_ERROR, e.getMessage());
        }

        mars.setName("Red Planet");
        planetService.update(mars);

        Planet foundPlanet = planetService.findById("MARS");
        logger.info(MSG_PLANET_FOUND, foundPlanet);

        List<Planet> allPlanets = planetService.findAll();
        logger.info(MSG_ALL_PLANETS, allPlanets);

        // === PASSENGER ===
        Client p = new Client();
        p.setName("Test Passenger");
        p.setPassport("TP001");

        try {
            passengerService.save(p);
        } catch (IllegalArgumentException e) {
            logger.info(MSG_PASSENGER_EXISTS_WARNING);
        }

        // Try saving again to see the warning
        try {
            passengerService.save(p);
        } catch (IllegalArgumentException e) {
            logger.info(MSG_PASSENGER_EXISTS_WARNING);
        }

        // Find the saved passenger to get the generated ID
        Client savedClient = passengerService.findAll().stream()
                .filter(client -> "TP001".equals(client.getPassport()))
                .findFirst()
                .orElseThrow();

        savedClient.setName("Updated Passenger");
        passengerService.update(savedClient);

        Client foundClient = passengerService.findById(savedClient.getId());
        logger.info(MSG_PASSENGER_FOUND, foundClient);

        List<Client> allClients = passengerService.findAll();
        logger.info(MSG_ALL_PASSENGERS, allClients);

        // === TICKET ===
        Ticket ticket = new Ticket();
        ticket.setCreatedAt(Instant.now());
        ticket.setFromPlanet(mars);
        ticket.setToPlanet(mars); // just to simplify testing
        ticketService.save(ticket);

        // Find saved ticket
        Ticket savedTicket = ticketService.findAll().get(0);
        savedTicket.setCreatedAt(Instant.now());
        ticketService.update(savedTicket);

        Ticket foundTicket = ticketService.findById(savedTicket.getTicketId());
        logger.info(MSG_TICKET_FOUND, foundTicket);

        List<Ticket> allTickets = ticketService.findAll();
        logger.info(MSG_ALL_TICKETS, allTickets);

        // === DELETE ===
        passengerService.deleteById(savedClient.getId());
        planetService.deleteById("MARS");
        ticketService.deleteById(savedTicket.getTicketId());
        HibernateUtil.getInstance().close();
        logger.info(MSG_EXECUTION_DONE);
    }




    public static void migrate() {
        Flyway.configure()
                .dataSource("jdbc:h2:./spacetrain", "", "")
                .load()
                .migrate();
    }
}
